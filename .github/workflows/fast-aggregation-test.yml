name: Fast Aggregation Test

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_run:
    workflows: ["Docker CI/CD"]
    types:
      - completed
    branches:
      - dev

env:
  CARGO_TERM_COLOR: always
  AGGREGATION_FREQUENCY: 0.3  # Set aggregation frequency to 0.3 seconds (300ms) for fast testing

jobs:
  fast-aggregation-test:
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file with fast aggregation
        run: |
          cp example.env .env
          
          # Set to LOCAL mode
          sed -i 's|^ENVIRONMENT=.*|ENVIRONMENT=LOCAL|' .env
          
          # Set fast aggregation frequency
          echo "AGGREGATION_FREQUENCY=$AGGREGATION_FREQUENCY" >> .env
          
          # Uncomment local RPC URLs
          sed -i '/^# HTTP_RPC=http:\/\/localhost:8545/s/^# //' .env
          sed -i '/^# WS_RPC=ws:\/\/localhost:8545/s/^# //' .env
          sed -i '/^# RPC_URL=http:\/\/ethereum:8545/s/^# //' .env
          
          # Set FORK_URL for local forking
          sed -i 's|^# FORK_URL=.*|FORK_URL=https://ethereum-holesky.publicnode.com|' .env
          
          # Uncomment Holesky testnet contract addresses (needed for LOCAL mode with fork)
          sed -i 's/^#DELEGATION_MANAGER_ADDRESS=/DELEGATION_MANAGER_ADDRESS=/' .env
          sed -i 's/^#STRATEGY_MANAGER_ADDRESS=/STRATEGY_MANAGER_ADDRESS=/' .env
          sed -i 's/^#LST_CONTRACT_ADDRESS=/LST_CONTRACT_ADDRESS=/' .env
          sed -i 's/^#LST_STRATEGY_ADDRESS=/LST_STRATEGY_ADDRESS=/' .env
          sed -i 's/^#BLS_SIGNATURE_CHECKER_ADDRESS=/BLS_SIGNATURE_CHECKER_ADDRESS=/' .env
          sed -i 's/^#OPERATOR_STATE_RETRIEVER_ADDRESS=/OPERATOR_STATE_RETRIEVER_ADDRESS=/' .env
          sed -i 's/^#ALLOCATION_MANAGER_ADDRESS=/ALLOCATION_MANAGER_ADDRESS=/' .env
          
          # Use default Anvil private key for testing
          DEFAULT_ANVIL_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
          sed -i "s|^PRIVATE_KEY=.*|PRIVATE_KEY=$DEFAULT_ANVIL_KEY|" .env
          sed -i "s|^FUNDED_KEY=.*|FUNDED_KEY=$DEFAULT_ANVIL_KEY|" .env
          
          echo "=== Environment configured with fast aggregation ==="
          grep -E "^(ENVIRONMENT|AGGREGATION_FREQUENCY|HTTP_RPC)" .env

      - name: Create CI override file for router
        run: |
          cat > docker-compose.ci.yml << 'EOF'
          # Override file for CI testing - uses pre-built image from ghcr.io
          services:
            router:
              image: ghcr.io/breadchaincoop/commonware-avs-router:dev
              build:
                context: .
                dockerfile: Dockerfile
          EOF

      - name: Pull Docker images
        timeout-minutes: 5
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml pull

      - name: Start all services
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps

      - name: Wait for EigenLayer setup
        timeout-minutes: 5
        run: |
          echo "Waiting for EigenLayer setup to complete..."
          timeout=180
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            # Check if the keys and deployment file exist
            if [ -f "config/.nodes/operator_keys/testacc1.private.bls.key.json" ] && 
               [ -f "config/.nodes/avs_deploy.json" ]; then
              echo "✓ EigenLayer setup completed"
              ls -la config/.nodes/
              break
            fi
            
            # Check if eigenlayer container exited with error
            container_id=$(docker compose -f docker-compose.yml -f docker-compose.ci.yml ps -q eigenlayer)
            if [ -n "$container_id" ] && [ "$(docker inspect -f '{{.State.Status}}' $container_id 2>/dev/null)" = "exited" ]; then
              exit_code=$(docker inspect -f '{{.State.ExitCode}}' $container_id)
              if [ "$exit_code" != "0" ]; then
                echo "EigenLayer container exited with error code: $exit_code"
                docker compose -f docker-compose.yml -f docker-compose.ci.yml logs eigenlayer --tail=50
                exit 1
              fi
            fi
            
            echo "Waiting for EigenLayer setup... ($elapsed/$timeout seconds)"
            sleep 10
            elapsed=$((elapsed + 10))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout waiting for EigenLayer setup"
            docker compose -f docker-compose.yml -f docker-compose.ci.yml logs eigenlayer --tail=50
            exit 1
          fi

      - name: Verify fast aggregation frequency
        run: |
          echo "=== Verifying router is using fast aggregation frequency ==="
          
          # Give router time to initialize
          sleep 10
          
          # Check router logs for aggregation frequency
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs router --tail=20 | grep -i "aggregation" || true
          
          # Get counter contract address
          COUNTER_ADDRESS=$(cat config/.nodes/avs_deploy.json | jq -r '.addresses.counter')
          echo "Counter contract address: $COUNTER_ADDRESS"
          
          # Read initial counter value
          INITIAL_COUNT=$(curl -s -X POST http://localhost:8545 \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "method":"eth_call",
              "params":[{
                "to":"'$COUNTER_ADDRESS'",
                "data":"0x8381f58a"
              }, "latest"],
              "id":1
            }' | jq -r '.result' | xargs printf "%d\n")
          
          echo "Initial counter value: $INITIAL_COUNT"
          
          # Wait for 30 seconds (should see ~100 aggregations with 0.3s frequency)
          echo "Waiting 30 seconds for fast aggregation cycles..."
          sleep 30
          
          # Read final counter value
          FINAL_COUNT=$(curl -s -X POST http://localhost:8545 \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc":"2.0",
              "method":"eth_call",
              "params":[{
                "to":"'$COUNTER_ADDRESS'",
                "data":"0x8381f58a"
              }, "latest"],
              "id":1
            }' | jq -r '.result' | xargs printf "%d\n")
          
          echo "Final counter value: $FINAL_COUNT"
          INCREMENTS=$((FINAL_COUNT - INITIAL_COUNT))
          
          # With 0.3s frequency over 30 seconds, we expect many increments
          if [ $INCREMENTS -ge 50 ]; then
            echo "✓ Fast aggregation successful: $INCREMENTS increments in 30 seconds"
          elif [ $INCREMENTS -gt 0 ]; then
            echo "⚠ Aggregation working but slower than expected: only $INCREMENTS increments in 30 seconds"
            echo "Expected at least 50 increments with 0.3s frequency"
          else
            echo "✗ No counter increments detected"
            echo "=== Router logs ==="
            docker compose -f docker-compose.yml -f docker-compose.ci.yml logs router --tail=100
            exit 1
          fi

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Status ==="
          docker compose -f docker-compose.yml -f docker-compose.ci.yml ps -a
          
          echo "=== Router logs ==="
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs router --tail=100
          
          echo "=== Node logs ==="
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs node-1 node-2 node-3 --tail=50
          
          echo "=== EigenLayer logs ==="
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs eigenlayer --tail=50

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml down --volumes --remove-orphans