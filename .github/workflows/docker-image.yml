name: Docker CI/CD

on:
  push:
    branches:
      - main
      - dev
      - staging
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo
        run: echo "name=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push (per-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${{ matrix.arch }}-${{ github.sha }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

  manifest:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tags (branch/release + short sha)
        id: vars
        shell: bash
        run: |
          SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
          
          # Handle different event types
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            # For releases, use the release tag
            CHANNEL_TAG="${GITHUB_REF_NAME}"
          else
            # For pushes to branches
            CHANNEL_TAG="${GITHUB_REF_NAME}"
            [[ "$CHANNEL_TAG" == "main" ]] && CHANNEL_TAG="latest"
          fi

          echo "short_sha=${SHORT_SHA}"     >> "$GITHUB_OUTPUT"
          echo "channel_tag=${CHANNEL_TAG}" >> "$GITHUB_OUTPUT"

      - name: Create and push multi-arch manifest
        shell: bash
        run: |
          NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          NAME="${NAME,,}"
          TAG_PRIMARY="${{ steps.vars.outputs.channel_tag }}"
          TAG_WITH_SHA="${TAG_PRIMARY}-${{ steps.vars.outputs.short_sha }}"

          echo "Creating manifest tags: ${TAG_PRIMARY} and ${TAG_WITH_SHA}"

          docker buildx imagetools create \
            -t "${NAME}:${TAG_PRIMARY}" \
            -t "${NAME}:${TAG_WITH_SHA}" \
            "${NAME}:amd64-${{ github.sha }}" \
            "${NAME}:arm64-${{ github.sha }}"

