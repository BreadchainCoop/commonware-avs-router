1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "commonware-avs-router.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "commonware-avs-router.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "commonware-avs-router.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "commonware-avs-router.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the status of your deployment:
   kubectl get pods -l "app.kubernetes.io/name={{ include "commonware-avs-router.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -n {{ .Release.Namespace }}

3. View application logs:
   kubectl logs -l "app.kubernetes.io/name={{ include "commonware-avs-router.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -n {{ .Release.Namespace }} -f

{{- if not .Values.envFromSecrets.PRIVATE_KEY }}

‚ö†Ô∏è  WARNING: No private key configured! 
   The application requires PRIVATE_KEY to be set for blockchain transactions.
   
   Create a secret with your private key:
   kubectl create secret generic {{ include "commonware-avs-router.fullname" . }}-secrets \
     --from-literal=private-key="your-private-key-here" \
     -n {{ .Release.Namespace }}
   
   Then update your values.yaml:
   envFromSecrets:
     PRIVATE_KEY:
       secretName: "{{ include "commonware-avs-router.fullname" . }}-secrets"
       key: "private-key"
{{- end }}

{{- if eq .Values.env.ENVIRONMENT "TESTNET" }}

üìù TESTNET DEPLOYMENT NOTES:
   - Ensure your private key address has sufficient ETH on Holesky testnet
   - Monitor gas usage and fund the address as needed
   - Consider setting up persistent storage for configuration and keys
{{- end }}

{{- if eq .Values.env.ENVIRONMENT "LOCAL" }}

üîß LOCAL DEVELOPMENT NOTES:
   - This deployment is configured for local development
   - Ensure your local Ethereum node is accessible from the cluster
   - Use kubectl port-forward to access the service locally
{{- end }}

{{- if and .Values.autoscaling.enabled .Values.resources }}

üöÄ AUTOSCALING ENABLED:
   - Min replicas: {{ .Values.autoscaling.minReplicas }}
   - Max replicas: {{ .Values.autoscaling.maxReplicas }}
   - CPU threshold: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}%
   {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
   - Memory threshold: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}%
   {{- end }}
{{- end }}

For more information, visit: https://github.com/BreadchainCoop/commonware-avs-router